#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('fs-project:server');
var http = require('http');

//socket 1
const socketio = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


 //socket 2
 const io = socketio(server);
 io.on('connection', (socket) => {
  // io.emit("user connected");
  socket.on('join', ({ name, room }, callback) => {
    console.log(name, room)
    // const { error, user } = addUser({ id: socket.id, name, room });

    // if(error) return callback(error);

    // socket.join(user.room);

    io.emit('message', { user: 'admin', text: `${'puneet'}, welcome to room ${'tiwari'}.`});
    // socket.broadcast.to(user.room).emit('message', { user: 'admin', text: `${user.name} has joined!` });

    // io.to(user.room).emit('roomData', { room: user.room, users: getUsersInRoom(user.room) });

    callback();
  })})

//socket2
// const io = socketIo(server); 
// // const getApiAndEmit = async socket => {
// //   try {
// //     const res = await axios.get(
// //       "http://localhost:3001/api/user/thoughts"
// //     ); // Getting the data from DarkSky
// //     socket.emit("FromAPI",res.data); // Emitting a new message. It will be consumed by the client
// //   } catch (error) {
// //     console.error(`Error: ${error}`);
// //   }
// // };
// // let interval;

// // io.on("connection", socket => {
// //   console.log("New client connected");
// //   if (interval) {
// //     clearInterval(interval);
// //   }
// //   interval = setInterval(() => getApiAndEmit(socket), 10000);
// //   socket.on("disconnect", () => {
// //     console.log("Client disconnected");
// //   });
// // });

// // io.on('connect', function(socket){
// //   socket.emit('hello', 'world',(data) => {
// //     console.log(data,'fromemit'); // data will be 'woot'
// //   });
// //   console.log('a user connected');
// // });

// // io.on('new_message', (data) => {
// //   var New_Details={  
// //       username : data.username,  
// //       message : data.message  
// //       }; 

// //       socket.broadcast.emit('update_message', New_Details);

// //   console.log(data.username + ' just wrote ' + data.message);
// // });



// var numUsers = 0;

// io.on('connection', (socket) => {
//   var addedUser = false;

//   socket.on('add user', (username) => {
//     if (addedUser) return;

//     // we store the username in the socket session for this client
//     socket.username = username;
//     //addedUser = true;
//     ++numUsers;
//     // echo globally (all clients) that a person has connected
//     //socket.broadcast.emit('user joined', {
//     //  username: socket.username,
//      // numUsers: numUsers
//      console.log(username+' has logged on, now there are '+numUsers+' online');
//   });

//   //when receive new coors
//   socket.on('new_message', function (data) {
//     socket.broadcast.emit('new_message', data);
//     console.log(socket.username+' just sent '+JSON.stringify(data));
//     });


// // when the user disconnects.. perform this
// socket.on('disconnect', () => {
//        --numUsers;
//        console.log(socket.username+' has left, now there are '+numUsers+' online');
// });
// });
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log( `server started on ${port}`)
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
